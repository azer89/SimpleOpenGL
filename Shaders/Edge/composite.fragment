#version 460 core

out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D depthMap;

const float EdgeThreshold = 0.1;

const vec3 lum = vec3(0.2126, 0.7152, 0.0722);
float Luminance(vec3 color)
{
    //return dot(lum, color);
    return color.x + color.y + color.z;
}

void main()
{
    vec3 posValue = texture(depthMap, TexCoords).rgb;
    vec2 texelSize = 1.0 / textureSize(depthMap, 0);

    float s00 = Luminance(texture(depthMap, TexCoords + ivec2(-1, 1) * texelSize).rgb);
    float s10 = Luminance(texture(depthMap, TexCoords + ivec2(-1, 0) * texelSize).rgb);
    float s20 = Luminance(texture(depthMap, TexCoords + ivec2(-1, -1) * texelSize).rgb);
    float s01 = Luminance(texture(depthMap, TexCoords + ivec2(0, 1) * texelSize).rgb);
    float s21 = Luminance(texture(depthMap, TexCoords + ivec2(0, -1) * texelSize).rgb);
    float s02 = Luminance(texture(depthMap, TexCoords + ivec2(1, 1) * texelSize).rgb);
    float s12 = Luminance(texture(depthMap, TexCoords + ivec2(1, 0) * texelSize).rgb);
    float s22 = Luminance(texture(depthMap, TexCoords + ivec2(1, -1) * texelSize).rgb);

    float sx = s00 + 2 * s10 + s20 - (s02 + 2 * s12 + s22);
    float sy = s00 + 2 * s01 + s02 - (s20 + 2 * s21 + s22);

    float g = sx * sx + sy * sy;

    if (g > EdgeThreshold)
    {
        FragColor = vec4(1.0);
    }
    else
    {
        FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }


}