#version 460 core

out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;
uniform sampler2D ssao;

struct Light
{
	vec3 Position;
	vec3 Color;
};
const int NR_LIGHTS = 200;
uniform Light lights[NR_LIGHTS];

uniform vec3 viewPos;
uniform float linear;
uniform float quadratic;

void main()
{
	// Retrieve data from G buffer
	vec3 FragPos = texture(gPosition, TexCoords).rgb;
	vec3 Normal = texture(gNormal, TexCoords).rgb;
	vec3 Diffuse = texture(gAlbedo, TexCoords).rgb;
	float AmbientOcclusion = texture(ssao, TexCoords).r;

	// Calculate lighting
	vec3 ambient = vec3(0.3 * Diffuse * AmbientOcclusion);
	vec3 lighting = ambient;
	vec3 viewDir = normalize(viewPos - FragPos);

	for (int i = 0; i < NR_LIGHTS; ++i)
	{
		// Diffuse
		vec3 lightDir = normalize(lights[i].Position - FragPos);
		vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color;

		// Specular
		vec3 halfwayDir = normalize(lightDir + viewDir);
		float spec = pow(max(dot(Normal, halfwayDir), 0.0), 8.0);
		vec3 specular = lights[i].Color * spec;

		// Attenuation
		float distance = length(lights[i].Position - FragPos);
		float attenuation = 1.0 / (1.0 + linear * distance + quadratic * distance * distance);
		diffuse *= attenuation;
		specular *= attenuation;

		lighting += diffuse + specular;
	}

	FragColor = vec4(lighting, 1.0);
}