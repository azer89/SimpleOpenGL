#version 330 core

out float FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D texNoise;

uniform vec3 samples[256]; // Make this array long enough

// Parameters
uniform int kernelSize; // = 64;
uniform float radius; // = 0.5;
uniform float bias; // = 0.025;

uniform float screen_width;
uniform float screen_height;
uniform float noise_size;

uniform mat4 projection;

void main()
{
    vec2 noiseScale = vec2(screen_width / noise_size, screen_height / noise_size);

    // Get input for SSAO algorithm
    vec3 fragPos = texture(gPosition, TexCoords).xyz;
	vec3 normal = normalize(texture(gNormal, TexCoords).rgb);
	vec3 randomVec = normalize(texture(texNoise, TexCoords * noiseScale).xyz);
	
	// Create TBN change-of-basis matrix: from tangent-space to view-space
	vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 TBN = mat3(tangent, bitangent, normal);
	
	// Iterate over the sample kernel and calculate occlusion factor
	float occlusion = 0.0;
	for (int i = 0; i < kernelSize; ++i)
	{
		// Get sample position
		vec3 samplePos = TBN * samples[i]; // From tangent to view-space
		samplePos = fragPos + samplePos * radius;

		// Project sample position (to sample texture) (to get position on screen/texture)
		vec4 offset = vec4(samplePos, 1.0);
		offset = projection * offset; // From view to clip-space
		offset.xyz /= offset.w; // Perspective divide
		offset.xyz = offset.xyz * 0.5 + 0.5; // Transform to range 0.0 - 1.0

		// Get sample depth
		float sampleDepth = texture(gPosition, offset.xy).z; // Get depth value of kernel sample

		// Range check & accumulate
		float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
		occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;
	}
	occlusion = 1.0 - (occlusion / kernelSize);

	FragColor = occlusion;
}